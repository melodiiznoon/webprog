/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;
/******/
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	var DTW = __webpack_require__(1);
	
	var nodeDTW = function() {
		// console.log(rgb);
		// var s = [1,1,2,3,2,0];
		// var t = [0,1,1,2,3,2,1];
		var normalArrayRGB = Array.prototype.slice.call(rgb);
		console.log(normalArrayRGB);
		var s = normalArrayRGB;
		var t = normalArrayRGB;
		var dtw = new DTW();
		var cost = dtw.compute(s, t);
		var path = dtw.path();
		console.log('Cost: ' + cost);
		console.log('Path: ');
		console.log(path);
	};

/***/ },
/* 1 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(2);


/***/ },
/* 2 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * @title DTW API
	 * @author Elmar Langholz
	 */
	
	var debug = __webpack_require__(3)('dtw');
	var validate = __webpack_require__(6);
	var matrix = __webpack_require__(7);
	var comparison = __webpack_require__(8);
	
	function validateOptions(options) {
	    if (typeof options !== 'object') {
	        throw new TypeError('Invalid options type: expected an object');
	    } else if (typeof options.distanceMetric !== 'string' && typeof options.distanceFunction !== 'function') {
	        throw new TypeError('Invalid distance types: expected a string distance type or a distance function');
	    } else if (typeof options.distanceMetric === 'string' && typeof options.distanceFunction === 'function') {
	        throw new Error('Invalid parameters: provide either a distance metric or function but not both');
	    }
	
	    if (typeof options.distanceMetric === 'string') {
	        var normalizedDistanceMetric = options.distanceMetric.toLowerCase();
	        if (normalizedDistanceMetric !== 'manhattan' && normalizedDistanceMetric !== 'euclidean'
	            && normalizedDistanceMetric !== 'squaredeuclidean') {
	            throw new Error('Invalid parameter value: Unknown distance metric \'' + options.distanceMetric + '\'');
	        }
	    }
	}
	
	function retrieveDistanceFunction(distanceMetric) {
	    var normalizedDistanceMetric = distanceMetric.toLowerCase();
	    var distanceFunction = null;
	    if (normalizedDistanceMetric === 'manhattan') {
	        distanceFunction = __webpack_require__(9).distance;
	    } else if (normalizedDistanceMetric === 'euclidean') {
	        distanceFunction = __webpack_require__(10).distance;
	    } else if (normalizedDistanceMetric === 'squaredeuclidean') {
	        distanceFunction = __webpack_require__(11).distance;
	    }
	
	    return distanceFunction;
	}
	
	/**
	 * Create a DTWOptions object
	 * @class DTWOptions
	 * @member {string} distanceMetric The distance metric to use: `'manhattan' | 'euclidean' | 'squaredEuclidean'`.
	 * @member {function} distanceFunction The distance function to use. The function should accept two numeric arguments and return the numeric distance. e.g. function (a, b) { return a + b; }
	 */
	
	/**
	 * Create a DTW object
	 * @class DTW
	 */
	/**
	 * Initializes a new instance of the `DTW`. If no options are provided the squared euclidean distance function is used.
	 * @function DTW
	 * @param {DTWOptions} [options] The options to initialize the dynamic time warping instance with.
	 */
	/**
	 * Computes the optimal match between two provided sequences.
	 * @method compute
	 * @param {number[]} firstSequence The first sequence.
	 * @param {number[]} secondSequence The second sequence.
	 * @param {number} [window] The window parameter (for the locality constraint) to use.
	 * @returns {number} The similarity between the provided temporal sequences.
	 */
	/**
	 * Retrieves the optimal match between two provided sequences.
	 * @method path
	 * @returns {number[]} The array containing the optimal path points.
	 */
	var DTW = function (options) {
	    var state = { distanceCostMatrix: null };
	    if (typeof options === 'undefined') {
	        state.distance = __webpack_require__(11).distance;
	    } else {
	        validateOptions(options);
	        if (typeof options.distanceMetric === 'string') {
	            state.distance = retrieveDistanceFunction(options.distanceMetric);
	        } else if (typeof options.distanceFunction === 'function') {
	            state.distance = options.distanceFunction;
	        }
	    }
	
	    this.compute = function (firstSequence, secondSequence, window) {
	        var cost = Number.POSITIVE_INFINITY;
	        if (typeof window === 'undefined') {
	            cost = computeOptimalPath(firstSequence, secondSequence, state);
	        } else if (typeof window === 'number') {
	            cost = computeOptimalPathWithWindow(firstSequence, secondSequence, window, state);
	        } else {
	            throw new TypeError('Invalid window parameter type: expected a number');
	        }
	
	        return cost;
	    };
	
	    this.path = function () {
	        var path = null;
	        if (state.distanceCostMatrix instanceof Array) {
	            path = retrieveOptimalPath(state);
	        }
	
	        return path;
	    };
	};
	
	function validateComputeParameters(s, t) {
	    validate.sequence(s, 'firstSequence');
	    validate.sequence(t, 'secondSequence');
	}
	
	function computeOptimalPath(s, t, state) {
	    debug('> computeOptimalPath');
	    validateComputeParameters(s, t);
	    var start = new Date().getTime();
	    state.m = s.length;
	    state.n = t.length;
	    var distanceCostMatrix = matrix.create(state.m, state.n, Number.POSITIVE_INFINITY);
	
	    distanceCostMatrix[0][0] = state.distance(s[0], t[0]);
	
	    for (var rowIndex = 1; rowIndex < state.m; rowIndex++) {
	        var cost = state.distance(s[rowIndex], t[0]);
	        distanceCostMatrix[rowIndex][0] = cost + distanceCostMatrix[rowIndex - 1][0];
	    }
	
	    for (var columnIndex = 1; columnIndex < state.n; columnIndex++) {
	        var cost = state.distance(s[0], t[columnIndex]);
	        distanceCostMatrix[0][columnIndex] = cost + distanceCostMatrix[0][columnIndex - 1];
	    }
	
	    for (var rowIndex = 1; rowIndex < state.m; rowIndex++) {
	        for (var columnIndex = 1; columnIndex < state.n; columnIndex++) {
	            var cost = state.distance(s[rowIndex], t[columnIndex]);
	            distanceCostMatrix[rowIndex][columnIndex] =
	                cost + Math.min(
	                    distanceCostMatrix[rowIndex - 1][columnIndex],          // Insertion
	                    distanceCostMatrix[rowIndex][columnIndex - 1],          // Deletion
	                    distanceCostMatrix[rowIndex - 1][columnIndex - 1]);     // Match
	        }
	    }
	
	    var end = new Date().getTime();
	    var time = end - start;
	    debug('< computeOptimalPath (' + time + ' ms)');
	    state.distanceCostMatrix = distanceCostMatrix;
	    state.similarity = distanceCostMatrix[state.m - 1][state.n - 1];
	    return state.similarity;
	}
	
	function computeOptimalPathWithWindow(s, t, w, state) {
	    debug('> computeOptimalPathWithWindow');
	    validateComputeParameters(s, t);
	    var start = new Date().getTime();
	    state.m = s.length;
	    state.n = t.length;
	    var window = Math.max(w, Math.abs(s.length - t.length));
	    var distanceCostMatrix = matrix.create(state.m + 1, state.n + 1, Number.POSITIVE_INFINITY);
	    distanceCostMatrix[0][0] = 0;
	
	    for (var rowIndex = 1; rowIndex <= state.m; rowIndex++) {
	        for (var columnIndex = Math.max(1, rowIndex - window); columnIndex <= Math.min(state.n, rowIndex + window); columnIndex++) {
	            var cost = state.distance(s[rowIndex - 1], t[columnIndex - 1]);
	            distanceCostMatrix[rowIndex][columnIndex] =
	                cost + Math.min(
	                distanceCostMatrix[rowIndex - 1][columnIndex],          // Insertion
	                distanceCostMatrix[rowIndex][columnIndex - 1],          // Deletion
	                distanceCostMatrix[rowIndex - 1][columnIndex - 1]);     // Match
	        }
	    }
	
	    var end = new Date().getTime();
	    var time = end - start;
	    debug('< computeOptimalPathWithWindow (' + time + ' ms)');
	    distanceCostMatrix.shift();
	    distanceCostMatrix = distanceCostMatrix.map(function (row) {
	        return row.slice(1, row.length);
	    });
	    state.distanceCostMatrix = distanceCostMatrix;
	    state.similarity = distanceCostMatrix[state.m - 1][state.n - 1];
	    return state.similarity;
	}
	
	function retrieveOptimalPath(state) {
	    debug('> retrieveOptimalPath');
	    var start = new Date().getTime();
	
	    var rowIndex = state.m - 1;
	    var columnIndex = state.n - 1;
	    var path = [[rowIndex, columnIndex]];
	    var epsilon = 1e-14;
	    while ((rowIndex > 0) || (columnIndex > 0)) {
	        if ((rowIndex > 0) && (columnIndex > 0)) {
	            var min = Math.min(
	                state.distanceCostMatrix[rowIndex - 1][columnIndex],          // Insertion
	                state.distanceCostMatrix[rowIndex][columnIndex - 1],          // Deletion
	                state.distanceCostMatrix[rowIndex - 1][columnIndex - 1]);     // Match
	            if (comparison.nearlyEqual(min, state.distanceCostMatrix[rowIndex - 1][columnIndex - 1], epsilon)) {
	                rowIndex--;
	                columnIndex--;
	            } else if (comparison.nearlyEqual(min, state.distanceCostMatrix[rowIndex - 1][columnIndex], epsilon)) {
	                rowIndex--;
	            } else if (comparison.nearlyEqual(min, state.distanceCostMatrix[rowIndex][columnIndex - 1], epsilon)) {
	                columnIndex--;
	            }
	        } else if ((rowIndex > 0) && (columnIndex === 0)) {
	            rowIndex--;
	        } else if ((rowIndex === 0) && (columnIndex > 0)) {
	            columnIndex--;
	        }
	
	        path.push([rowIndex, columnIndex]);
	    }
	
	    var end = new Date().getTime();
	    var time = end - start;
	    debug('< retrieveOptimalPath (' + time + ' ms)');
	    return path.reverse();
	}
	
	module.exports = DTW;


/***/ },
/* 3 */
/***/ function(module, exports, __webpack_require__) {

	
	/**
	 * This is the web browser implementation of `debug()`.
	 *
	 * Expose `debug()` as the module.
	 */
	
	exports = module.exports = __webpack_require__(4);
	exports.log = log;
	exports.formatArgs = formatArgs;
	exports.save = save;
	exports.load = load;
	exports.useColors = useColors;
	exports.storage = 'undefined' != typeof chrome
	               && 'undefined' != typeof chrome.storage
	                  ? chrome.storage.local
	                  : localstorage();
	
	/**
	 * Colors.
	 */
	
	exports.colors = [
	  'lightseagreen',
	  'forestgreen',
	  'goldenrod',
	  'dodgerblue',
	  'darkorchid',
	  'crimson'
	];
	
	/**
	 * Currently only WebKit-based Web Inspectors, Firefox >= v31,
	 * and the Firebug extension (any Firefox version) are known
	 * to support "%c" CSS customizations.
	 *
	 * TODO: add a `localStorage` variable to explicitly enable/disable colors
	 */
	
	function useColors() {
	  // is webkit? http://stackoverflow.com/a/16459606/376773
	  return ('WebkitAppearance' in document.documentElement.style) ||
	    // is firebug? http://stackoverflow.com/a/398120/376773
	    (window.console && (console.firebug || (console.exception && console.table))) ||
	    // is firefox >= v31?
	    // https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages
	    (navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/) && parseInt(RegExp.$1, 10) >= 31);
	}
	
	/**
	 * Map %j to `JSON.stringify()`, since no Web Inspectors do that by default.
	 */
	
	exports.formatters.j = function(v) {
	  return JSON.stringify(v);
	};
	
	
	/**
	 * Colorize log arguments if enabled.
	 *
	 * @api public
	 */
	
	function formatArgs() {
	  var args = arguments;
	  var useColors = this.useColors;
	
	  args[0] = (useColors ? '%c' : '')
	    + this.namespace
	    + (useColors ? ' %c' : ' ')
	    + args[0]
	    + (useColors ? '%c ' : ' ')
	    + '+' + exports.humanize(this.diff);
	
	  if (!useColors) return args;
	
	  var c = 'color: ' + this.color;
	  args = [args[0], c, 'color: inherit'].concat(Array.prototype.slice.call(args, 1));
	
	  // the final "%c" is somewhat tricky, because there could be other
	  // arguments passed either before or after the %c, so we need to
	  // figure out the correct index to insert the CSS into
	  var index = 0;
	  var lastC = 0;
	  args[0].replace(/%[a-z%]/g, function(match) {
	    if ('%%' === match) return;
	    index++;
	    if ('%c' === match) {
	      // we only are interested in the *last* %c
	      // (the user may have provided their own)
	      lastC = index;
	    }
	  });
	
	  args.splice(lastC, 0, c);
	  return args;
	}
	
	/**
	 * Invokes `console.log()` when available.
	 * No-op when `console.log` is not a "function".
	 *
	 * @api public
	 */
	
	function log() {
	  // this hackery is required for IE8/9, where
	  // the `console.log` function doesn't have 'apply'
	  return 'object' === typeof console
	    && console.log
	    && Function.prototype.apply.call(console.log, console, arguments);
	}
	
	/**
	 * Save `namespaces`.
	 *
	 * @param {String} namespaces
	 * @api private
	 */
	
	function save(namespaces) {
	  try {
	    if (null == namespaces) {
	      exports.storage.removeItem('debug');
	    } else {
	      exports.storage.debug = namespaces;
	    }
	  } catch(e) {}
	}
	
	/**
	 * Load `namespaces`.
	 *
	 * @return {String} returns the previously persisted debug modes
	 * @api private
	 */
	
	function load() {
	  var r;
	  try {
	    r = exports.storage.debug;
	  } catch(e) {}
	  return r;
	}
	
	/**
	 * Enable namespaces listed in `localStorage.debug` initially.
	 */
	
	exports.enable(load());
	
	/**
	 * Localstorage attempts to return the localstorage.
	 *
	 * This is necessary because safari throws
	 * when a user disables cookies/localstorage
	 * and you attempt to access it.
	 *
	 * @return {LocalStorage}
	 * @api private
	 */
	
	function localstorage(){
	  try {
	    return window.localStorage;
	  } catch (e) {}
	}


/***/ },
/* 4 */
/***/ function(module, exports, __webpack_require__) {

	
	/**
	 * This is the common logic for both the Node.js and web browser
	 * implementations of `debug()`.
	 *
	 * Expose `debug()` as the module.
	 */
	
	exports = module.exports = debug;
	exports.coerce = coerce;
	exports.disable = disable;
	exports.enable = enable;
	exports.enabled = enabled;
	exports.humanize = __webpack_require__(5);
	
	/**
	 * The currently active debug mode names, and names to skip.
	 */
	
	exports.names = [];
	exports.skips = [];
	
	/**
	 * Map of special "%n" handling functions, for the debug "format" argument.
	 *
	 * Valid key names are a single, lowercased letter, i.e. "n".
	 */
	
	exports.formatters = {};
	
	/**
	 * Previously assigned color.
	 */
	
	var prevColor = 0;
	
	/**
	 * Previous log timestamp.
	 */
	
	var prevTime;
	
	/**
	 * Select a color.
	 *
	 * @return {Number}
	 * @api private
	 */
	
	function selectColor() {
	  return exports.colors[prevColor++ % exports.colors.length];
	}
	
	/**
	 * Create a debugger with the given `namespace`.
	 *
	 * @param {String} namespace
	 * @return {Function}
	 * @api public
	 */
	
	function debug(namespace) {
	
	  // define the `disabled` version
	  function disabled() {
	  }
	  disabled.enabled = false;
	
	  // define the `enabled` version
	  function enabled() {
	
	    var self = enabled;
	
	    // set `diff` timestamp
	    var curr = +new Date();
	    var ms = curr - (prevTime || curr);
	    self.diff = ms;
	    self.prev = prevTime;
	    self.curr = curr;
	    prevTime = curr;
	
	    // add the `color` if not set
	    if (null == self.useColors) self.useColors = exports.useColors();
	    if (null == self.color && self.useColors) self.color = selectColor();
	
	    var args = Array.prototype.slice.call(arguments);
	
	    args[0] = exports.coerce(args[0]);
	
	    if ('string' !== typeof args[0]) {
	      // anything else let's inspect with %o
	      args = ['%o'].concat(args);
	    }
	
	    // apply any `formatters` transformations
	    var index = 0;
	    args[0] = args[0].replace(/%([a-z%])/g, function(match, format) {
	      // if we encounter an escaped % then don't increase the array index
	      if (match === '%%') return match;
	      index++;
	      var formatter = exports.formatters[format];
	      if ('function' === typeof formatter) {
	        var val = args[index];
	        match = formatter.call(self, val);
	
	        // now we need to remove `args[index]` since it's inlined in the `format`
	        args.splice(index, 1);
	        index--;
	      }
	      return match;
	    });
	
	    if ('function' === typeof exports.formatArgs) {
	      args = exports.formatArgs.apply(self, args);
	    }
	    var logFn = enabled.log || exports.log || console.log.bind(console);
	    logFn.apply(self, args);
	  }
	  enabled.enabled = true;
	
	  var fn = exports.enabled(namespace) ? enabled : disabled;
	
	  fn.namespace = namespace;
	
	  return fn;
	}
	
	/**
	 * Enables a debug mode by namespaces. This can include modes
	 * separated by a colon and wildcards.
	 *
	 * @param {String} namespaces
	 * @api public
	 */
	
	function enable(namespaces) {
	  exports.save(namespaces);
	
	  var split = (namespaces || '').split(/[\s,]+/);
	  var len = split.length;
	
	  for (var i = 0; i < len; i++) {
	    if (!split[i]) continue; // ignore empty strings
	    namespaces = split[i].replace(/\*/g, '.*?');
	    if (namespaces[0] === '-') {
	      exports.skips.push(new RegExp('^' + namespaces.substr(1) + '$'));
	    } else {
	      exports.names.push(new RegExp('^' + namespaces + '$'));
	    }
	  }
	}
	
	/**
	 * Disable debug output.
	 *
	 * @api public
	 */
	
	function disable() {
	  exports.enable('');
	}
	
	/**
	 * Returns true if the given mode name is enabled, false otherwise.
	 *
	 * @param {String} name
	 * @return {Boolean}
	 * @api public
	 */
	
	function enabled(name) {
	  var i, len;
	  for (i = 0, len = exports.skips.length; i < len; i++) {
	    if (exports.skips[i].test(name)) {
	      return false;
	    }
	  }
	  for (i = 0, len = exports.names.length; i < len; i++) {
	    if (exports.names[i].test(name)) {
	      return true;
	    }
	  }
	  return false;
	}
	
	/**
	 * Coerce `val`.
	 *
	 * @param {Mixed} val
	 * @return {Mixed}
	 * @api private
	 */
	
	function coerce(val) {
	  if (val instanceof Error) return val.stack || val.message;
	  return val;
	}


/***/ },
/* 5 */
/***/ function(module, exports) {

	/**
	 * Helpers.
	 */
	
	var s = 1000;
	var m = s * 60;
	var h = m * 60;
	var d = h * 24;
	var y = d * 365.25;
	
	/**
	 * Parse or format the given `val`.
	 *
	 * Options:
	 *
	 *  - `long` verbose formatting [false]
	 *
	 * @param {String|Number} val
	 * @param {Object} options
	 * @return {String|Number}
	 * @api public
	 */
	
	module.exports = function(val, options){
	  options = options || {};
	  if ('string' == typeof val) return parse(val);
	  return options.long
	    ? long(val)
	    : short(val);
	};
	
	/**
	 * Parse the given `str` and return milliseconds.
	 *
	 * @param {String} str
	 * @return {Number}
	 * @api private
	 */
	
	function parse(str) {
	  str = '' + str;
	  if (str.length > 10000) return;
	  var match = /^((?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|years?|yrs?|y)?$/i.exec(str);
	  if (!match) return;
	  var n = parseFloat(match[1]);
	  var type = (match[2] || 'ms').toLowerCase();
	  switch (type) {
	    case 'years':
	    case 'year':
	    case 'yrs':
	    case 'yr':
	    case 'y':
	      return n * y;
	    case 'days':
	    case 'day':
	    case 'd':
	      return n * d;
	    case 'hours':
	    case 'hour':
	    case 'hrs':
	    case 'hr':
	    case 'h':
	      return n * h;
	    case 'minutes':
	    case 'minute':
	    case 'mins':
	    case 'min':
	    case 'm':
	      return n * m;
	    case 'seconds':
	    case 'second':
	    case 'secs':
	    case 'sec':
	    case 's':
	      return n * s;
	    case 'milliseconds':
	    case 'millisecond':
	    case 'msecs':
	    case 'msec':
	    case 'ms':
	      return n;
	  }
	}
	
	/**
	 * Short format for `ms`.
	 *
	 * @param {Number} ms
	 * @return {String}
	 * @api private
	 */
	
	function short(ms) {
	  if (ms >= d) return Math.round(ms / d) + 'd';
	  if (ms >= h) return Math.round(ms / h) + 'h';
	  if (ms >= m) return Math.round(ms / m) + 'm';
	  if (ms >= s) return Math.round(ms / s) + 's';
	  return ms + 'ms';
	}
	
	/**
	 * Long format for `ms`.
	 *
	 * @param {Number} ms
	 * @return {String}
	 * @api private
	 */
	
	function long(ms) {
	  return plural(ms, d, 'day')
	    || plural(ms, h, 'hour')
	    || plural(ms, m, 'minute')
	    || plural(ms, s, 'second')
	    || ms + ' ms';
	}
	
	/**
	 * Pluralization helper.
	 */
	
	function plural(ms, n, name) {
	  if (ms < n) return;
	  if (ms < n * 1.5) return Math.floor(ms / n) + ' ' + name;
	  return Math.ceil(ms / n) + ' ' + name + 's';
	}


/***/ },
/* 6 */
/***/ function(module, exports) {

	function validateSequence(sequence, sequenceParameterName) {
	    if (!(sequence instanceof Array)) {
	        throw new TypeError('Invalid sequence \'' + sequenceParameterName + '\' type: expected an array');
	    }
	
	    if (sequence.length < 1) {
	        throw new Error('Invalid number of sequence data points for \'' + sequenceParameterName + '\': expected at least one');
	    }
	
	    if (typeof sequence[0] !== 'number') {
	        throw new TypeError('Invalid data points types for sequence \'' + sequenceParameterName + '\': expected a number');
	    }
	}
	
	module.exports = {
	    sequence: validateSequence
	};


/***/ },
/* 7 */
/***/ function(module, exports) {

	var createArray = function (length, value) {
	    if (typeof length !== 'number') {
	        throw new TypeError('Invalid length type');
	    }
	
	    if (typeof value === 'undefined') {
	        throw new Error('Invalid value: expected a value to be provided');
	    }
	
	    var array = new Array(length);
	    for (var index = 0; index < length; index++) {
	        array[index] = value;
	    }
	
	    return array;
	};
	
	var createMatrix = function (m, n, value) {
	    var matrix = [];
	    for (var rowIndex = 0; rowIndex < m; rowIndex++) {
	        matrix.push(createArray(n, value));
	    }
	
	    return matrix;
	};
	
	module.exports = {
	    create: createMatrix
	};


/***/ },
/* 8 */
/***/ function(module, exports) {

	var EPSILON = 2.2204460492503130808472633361816E-16;
	
	var nearlyEqual = function (i, j, epsilon) {
	    var iAbsolute= Math.abs(i);
	    var jAbsolute = Math.abs(j);
	    var difference = Math.abs(i - j);
	    var equal = i === j;
	    if (!equal) {
	        equal = difference < EPSILON;
	        if (!equal) {
	            equal = difference <= Math.max(iAbsolute, jAbsolute) * epsilon;
	        }
	    }
	
	    return equal;
	};
	
	module.exports = {
	    EPSILON: EPSILON,
	    nearlyEqual: nearlyEqual
	};

/***/ },
/* 9 */
/***/ function(module, exports) {

	var distance = function (x, y) {
	    var difference = x - y;
	    var manhattanDistance = Math.abs(difference);
	    return manhattanDistance;
	};
	
	module.exports = {
	    distance: distance
	};


/***/ },
/* 10 */
/***/ function(module, exports) {

	var distance = function (x, y) {
	    var difference = x - y;
	    var euclideanDistance = Math.sqrt(difference * difference);
	    return euclideanDistance;
	};
	
	module.exports = {
	    distance: distance
	};


/***/ },
/* 11 */
/***/ function(module, exports) {

	var distance = function (x, y) {
	    var difference = x - y;
	    var squaredEuclideanDistance = difference * difference;
	    return squaredEuclideanDistance;
	};
	
	module.exports = {
	    distance: distance
	};


/***/ }
/******/ ]);
//# sourceMappingURL=data:application/json;base64,